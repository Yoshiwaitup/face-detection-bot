import os
import logging
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import cv2
import numpy as np
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7419597367:AAF1wOt2sH57hBrToIhPbNYB51CxYk9vtW8"
API_URL = 'http://localhost:8000/detect_faces/'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    welcome_text = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.

üéì –Ø —è–≤–ª—è—é—Å—å —á–∞—Å—Ç—å—é —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–º—É –∑—Ä–µ–Ω–∏—é –∏ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é.

ü§ñ –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å –ª–∏—Ü–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏—Ö —Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –û—Ç–º–µ—á–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞ —Ä–∞–º–∫–∞–º–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏

üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë
2. –ù–∞–π–¥—É –≤—Å–µ –ª–∏—Ü–∞
3. –û—Ç–º–µ—á—É –∏—Ö –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
4. –í–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

‚ÑπÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π.

üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ª—é–¥—å–º–∏.
"""
    await message.reply(welcome_text)

@dp.message_handler(commands=['about'])
async def send_about(message: types.Message):
    about_text = """
üéØ –û –ø—Ä–æ–µ–∫—Ç–µ:

–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∏–∑—É—á–µ–Ω–∏—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:
‚Ä¢ FastAPI
‚Ä¢ Computer Vision
‚Ä¢ Machine Learning
‚Ä¢ PostgreSQL
‚Ä¢ Telegram Bot API

üë®‚Äçüíª –ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤
‚Ä¢ –†–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ REST API

üìö –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
‚Ä¢ Python
‚Ä¢ OpenCV
‚Ä¢ Roboflow
‚Ä¢ PostgreSQL
‚Ä¢ aiogram

üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:
–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª—è—Ö.
"""
    await message.reply(about_text)

@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    try:
        processing_msg = await message.reply("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        photo = message.photo[-1]
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = await bot.get_file(photo.file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        os.makedirs('temp', exist_ok=True)
        temp_path = f'temp/{photo.file_id}.jpg'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, temp_path)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {temp_path}")

        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = cv2.imread(temp_path)
        if img is None:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
        async with aiohttp.ClientSession() as session:
            with open(temp_path, 'rb') as photo_file:
                form = aiohttp.FormData()
                form.add_field(
                    'file',
                    photo_file,
                    filename='photo.jpg',
                    content_type='image/jpeg'
                )
                
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API")
                async with session.post(API_URL, data=form) as response:
                    if response.status == 200:
                        faces_data = await response.json()
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {faces_data}")
                        
                        if faces_data['faces_found'] > 0:
                            # –†–∏—Å—É–µ–º —Ä–∞–º–∫–∏
                            for face in faces_data['faces']:
                                x = face['x']
                                y = face['y']
                                w = face['width']
                                h = face['height']
                                confidence = face['confidence']
                                
                                cv2.rectangle(
                                    img, 
                                    (x - w//2, y - h//2),
                                    (x + w//2, y + h//2),
                                    (0, 255, 0),
                                    2
                                )
                                
                                cv2.putText(
                                    img,
                                    f"{confidence:.2%}",
                                    (x - w//2, y - h//2 - 10),
                                    cv2.FONT_HERSHEY_SIMPLEX,
                                    0.5,
                                    (0, 255, 0),
                                    2
                                )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            processed_path = f'temp/processed_{photo.file_id}.jpg'
                            cv2.imwrite(processed_path, img)
                            
                            with open(processed_path, 'rb') as processed_photo:
                                await message.reply_photo(
                                    processed_photo,
                                    caption=f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {faces_data['faces_found']}\n"
                                            f"üìä –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {min([face['confidence'] for face in faces_data['faces']]):.1%} - {max([face['confidence'] for face in faces_data['faces']]):.1%}"
                                )
                            
                            os.remove(processed_path)
                        else:
                            await message.reply("üòï –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–∏—Ü.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ API: {error_text}")
                        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_text}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_path)
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Ü–∞\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ - JPEG –∏–ª–∏ PNG\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!"
        )

@dp.message_handler(content_types=['text'])
async def handle_text(message: types.Message):
    if message.text.startswith('/'):
        await message.reply(
            "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
            "/about - –û –ø—Ä–æ–µ–∫—Ç–µ\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! üì∏"
        )

if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True) 